'''
# 문제 이해
계단의 최대값 합

# 발상
동적계획법

# 복잡도
계단의 수가 n일 때 O(n)의 시간복잡도를 가진다.

'''
n=int(input()) # 계단 개수
s=[int(input()) for _ in range(n)] # 계단 리스트
dp=[0]*(n) # dp 리스트
if len(s)<=2: # 계단이 2개 이하일땐 그냥 다 더해서 출력
    print(sum(s))
else: # 계단이 3개 이상일 때
    dp[0]=s[0] # 첫째 계단 수동 계산
    dp[1]=s[0]+s[1] # 둘째 계단까지 수동 계산
    for i in range(2,n): # 3번째 계단 부터 dp 점화식 이용해서 최대값 구하기
        dp[i]=max(dp[i-3]+s[i-1]+s[i], dp[i-2]+s[i])
    print(dp[-1])
'''
# 푼 시간
30분

# 채점
오답

# 느낀 점
첫 번째, 두 번째가 채워진 테이블에 대해 세 번째는 어떻게 만족하게 할 것인지, 네 번째까지 만족하게 하는지 고민 하자.
'''